FOR PROBLEM #1:

def mean(numbers):
    if not numbers:
        raise ValueError("The list is empty.")
    return sum(numbers) / len(numbers)

def median(numbers):
    if not numbers:
        raise ValueError("The list is empty.")
    sorted_numbers = sorted(numbers)
    n = len(sorted_numbers)
    mid = n // 2
    if n % 2 == 0:
        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2
    else:
        return sorted_numbers[mid]

def mode(numbers):
    if not numbers:
        raise ValueError("The list is empty.")
    from collections import Counter
    counts = Counter(numbers)
    max_frequency = max(counts. values())
    modes = [key for key, value in counts.items() if value == max_frequency]
    return min(modes)

if __name__ == "__main__":
    data = [1,2,2,3,4]
    print("Mean:", mean(data))
    print("Median:", median(data))
    print("Mode:", mode(data))







FOR PROBLEM #2:

def navigate_file():
    filename = input("Enter the filename: ")

    try:
        with open(filename, 'r') as file:
            lines = file.readlines()

        while True:
            print(f"The file has {len(lines)} lines.")
            
            line_number = int(input(f"Enter a line number (1 to {len(lines)}), or 0 to quit: "))
            
            if line_number == 0:
                print("Exiting the program.")
                break
            
            if 1 <= line_number <= len(lines):
                print(f"Line {line_number}: {lines[line_number - 1].strip()}")
            else:
                print(f"Invalid line number. Please enter a valid number between 1 and {len(lines)}.")

    except FileNotFoundError:
        print(f"The file '{filename}' was not found. Please check the filename and try again.")

if __name__ == "__main__":
    navigate_file()
